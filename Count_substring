//BRUTE FORCE APPROACH
#include <bits/stdc++.h>
using namespace std;
bool isValid(string s){
     bool hasA=false;
    bool hasB=false;
    bool hasC=false;
    
    for(char c:s){
        if(c=='a') { hasA=true;
        
        }
         else if(c=='b')  hasB=true;
         
         else if(c=='c')  hasC=true;
    }
     if(hasA && hasB && hasC) {
         return true;
     }
     
     return hasA && hasB && hasC;
}

int main() {
    string s="abcabc";
    int n=s.length();
   
    int cnt=0;
   // cout<<isValid(s)<<endl;
    for(int i=0;i<n;i++){
         string res="";
        for (int j=i;j<n;j++){
            res+=s[j];
            if(isValid(res)) cnt++;
        }
        
    }
    
    cout<<cnt<<endl;
      
    return 0;
}
//Optimal Approach
#include <bits/stdc++.h>
using namespace std;

int countValidSubstrings(string s) {
    int n = s.length();
    int left = 0, right = 0, count = 0;
    unordered_map<char, int> freq;

    for (right = 0; right < n; ++right) {
        freq[s[right]]++;

        while (freq['a'] > 0 && freq['b'] > 0 && freq['c'] > 0) {
            // All substrings from current 'right' to end are valid
            count += (n - right);
            freq[s[left]]--;
            left++;
        }
    }

    return count;
}

int main() {
    string s = "abcabc";
    cout << countValidSubstrings(s) << endl; // Output: 10
    return 0;
}

